USE sakila;

-- Write SQL queries to perform the following tasks using the Sakila database:

-- 1. List the number of films per category.

SELECT a.name AS Category, COUNT(b.film_id) AS No_of_films FROM sakila.category AS a
JOIN sakila.film_category AS b
ON a.category_id = b.category_id
GROUP BY Category;

-- 2. Retrieve the store ID, city, and country for each store.

SELECT a.store_id, c.city, d.country
	FROM sakila.store AS a
    JOIN sakila.address AS b
    ON a.address_id = b.address_id
    JOIN sakila.city AS c
    ON b.city_id = c.city_id
    JOIN sakila.country as d
    ON c.country_id = d.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.

SELECT b.store_id, SUM(a.amount) AS amount_$
FROM sakila.payment AS a
JOIN sakila.staff AS b
ON a.staff_id = b.staff_id
GROUP BY store_id;

-- 4. Determine the average running time of films for each category.

SELECT a.name AS Category, SUM(c.length)/COUNT(c.title) AS Average_film_duration FROM sakila.category AS a
JOIN sakila.film_category AS b
ON a.category_id = b.category_id
JOIN film AS c
ON b.film_id = c.film_id
GROUP BY Category;


-- Bonus:
-- 5. Identify the film categories with the longest average running time.

SELECT a.name AS Category, SUM(c.length)/COUNT(c.title) AS Average_film_duration FROM sakila.category AS a
JOIN sakila.film_category AS b
ON a.category_id = b.category_id
JOIN film AS c
ON b.film_id = c.film_id
GROUP BY Category
LIMIT 3;

-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT c.title, COUNT(b.film_id) AS No_of_rentals FROM sakila.rental AS a
JOIN sakila.inventory AS b
ON a.inventory_id = b.inventory_id
JOIN sakila.film AS c
ON b.film_id = c.film_id
GROUP BY title
ORDER BY No_of_rentals DESC 
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT b.store_id, a.title,
CASE
WHEN ISNULL(c.return_date) THEN "Not available"
ELSE "Available"
END AS Available_or_Not_available 
FROM sakila.film AS a
JOIN sakila.inventory AS b
ON a.film_id = b.film_id
JOIN sakila.rental AS c
ON b.inventory_id = c.inventory_id
WHERE a.title = "BULL SHAWSHANK";

SELECT c.title FROM sakila.rental AS a
JOIN sakila.inventory AS b
ON a.inventory_id = b.inventory_id
JOIN sakila.film AS c
ON b.film_id = c.film_id
WHERE ISNULL(return_date);

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT a.title, 
CASE
WHEN ISNULL(c.return_date) THEN "Not available"
ELSE "Available"
END AS Available_or_Not_available
FROM sakila.film AS a
LEFT JOIN sakila.inventory AS b
ON a.film_id = b.film_id
JOIN sakila.rental AS c
ON b.inventory_id = c.inventory_id;

-- 9. Here are some tips to help you successfully complete the lab:

-- Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:
-- Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
-- Identify a common column for both tables to use in the ON section of the join. If there isn't a common column, you may need to add another table with a common column.
-- Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
-- Determine which table you want to include all records from. This will help you decide which type of JOIN to use. If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. If you want records from both tables only where there is a match, use an INNER JOIN.
-- Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
-- Write the query

-- Tip 2: Break down the problem into smaller, more manageable parts. 
-- For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. 
-- Test your queries as you go, and check the output carefully to make sure it matches what you expect. 
-- This process takes time, so be patient and go step by step to build your query incrementally.